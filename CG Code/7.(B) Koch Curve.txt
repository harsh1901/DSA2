#include<iostream>
#include<stdio.h>
#include<GL/glut.h>
#include<stdlib.h>
using namespace std;
#define SIN 0.86602540 // oin(60 dogreen)
int n;
int x1 = 0, x2 = 550, y1=0, y2 = 0;
void koch(int x1, int y1, int x2, int y2, int m)
{
int xx, yy, x[5], y[5], lx, ly, offx=50, offy = 300;
lx = (x2-x1)/3;
ly = (y2-y1)/3;
x[0] =x1; // Store point po
y[0] = y1;
x[4] = x2; // Store point p4
y[4] = y2;
x[1] =x[0] + lx; // Store point p1
y[1] = y[0] + ly;
x[3] = x[0] + 2*lx; // Store point p3
y[3] = y[0] + 2*ly;
xx = x[3] -x[1]; // Translate point p2 to origin
yy = y[3]- y[1];
x[2] = xx*(0.5) + yy*(SIN); // Perform rotation for point p3
y[2] = -xx*(SIN) + yy*(0.5);
x[2] = x[2] + x[1]; // Perform inverse translation
y[2] = y[2] + y[1];
if(m>0)
{
koch(x[0], y[0], x[1], y[1], m-1); // Recursive call to Draw part1
koch(x[1], y[1], x[2], y[2], m-1); // Recursive call to Draw part2
koch(x[2], y[2], x[3], y[3], m-1); // Recursive call to Draw part3
koch(x[3], y[3], x[4], y[4], m-1); // Recursive call to Draw part4
}
else
{
glBegin(GL_LINES);
glVertex2d(offx + x[0],650-(offy + y[0]));
glVertex2d(offx + x[1],650-(offy + y[1]));
glEnd();
glBegin(GL_LINES);
glVertex2d(offx + x[1],650-(offy + y[1]));
glVertex2d(offx + x[2],650-(offy + y[2]));
glEnd();
glBegin(GL_LINES);
glVertex2d(offx + x[2],650-(offy + y[2]));
glVertex2d(offx + x[3],650-(offy + y[3]));
glEnd();
glBegin(GL_LINES);
glVertex2d(offx + x[3],650-(offy + y[3]));
glVertex2d(offx + x[4],660-(offy + y[4]));
glEnd();
}
}
void display(void)
{
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(1.0, 1.0, 1.0);
koch(x1, y1, x2, y2, n);
glFlush(); // send all output to display
}
void myinit() {
glClearColor(0.0, 0.0, 0.0, 1.0); // set background as black
glColor3f(1.0, 1.0, 0.0); // Draw in Yellow
glMatrixMode(GL_PROJECTION); // Establish the coordinate system
glLoadIdentity();
gluOrtho2D(0.0, 650.0, 0.0, 650.0);
}
int main(int argc, char **argv)
{
/* Initialise graphics mode
------------------------------------*/
cout<<"\n Enter the level of curve generation : ";
cin>>n;
glutInit(&argc, argv); // Initialize the toolkit
glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB); // Set display mode
glutInitWindowSize(650, 650); // Set window size
glutInitWindowPosition(0,0); // Set window position on the screen
// Open the screen window
glutCreateWindow("Koch Curve");
glutDisplayFunc(display); // Register redraw function
myinit();
glutMainLoop();
return 0;
}
